{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Our HHG Project Documentation This documentation contains components written in multiple languages: C++ Module Documentation Java GUI Documentation Python Backend Documentation About the Project This software simulates high-harmonic generation using numerical methods. It consists of: - a C++ core simulation engine, - a Java-based GUI frontend, - and a Python integration/management layer. Introduction High-Harmonic Generation (HHG) is a nonlinear optical process that occurs when intense, ultrashort laser pulses interact with atoms or molecules, resulting in the emission of coherent radiation at integer multiples of the driving laser frequency. The simulation of HHG phenomena requires highly accurate numerical models capable of resolving both temporal and spatial variations of the electromagnetic field, as well as the nonlinear atomic response. Due to the inherent complexity of the problem, particularly when modeling at the single-atom level with time-dependent quantum dynamics, a computationally efficient and physically robust simulation framework is required. The purpose of this project is to develop a modular and user-friendly software platform capable of simulating the nonlinear dipole response of a single atom under a focused laser beam using the Lewenstein model. The system is intended to serve both educational and research purposes, providing intuitive parameter control through a graphical user interface (GUI), while relying on a high-performance C++ backend to carry out the numerically intensive computations. Additionally, the platform should support convergence analysis of the time grid resolution and offer visual feedback in the form of dipole and spectral plots, enabling the user to assess the accuracy and physical validity of the simulation. Theoretical Background: High-Order Harmonic Generation from a Single Atom High-order harmonic generation (HHG) is a nonlinear light\u2013matter interaction process where an atom or molecule, subjected to an intense infrared (IR) laser field, emits radiation at multiples of the fundamental frequency. This section describes the essential physical mechanisms and theoretical models used in the simulation of HHG in noble gases. In theoretical treatments of HHG, several approximations are typically made: The driving laser frequency is far from any atomic resonance. Relativistic and magnetic effects are neglected. The dipole approximation applies (wavelength \u226b atomic size). Classical Model of HHG The classical or three-step model consists of: Ionization : The electron tunnels through the Coulomb potential barrier. Acceleration : The freed electron oscillates in the laser field. Recombination : The electron returns and recombines with the parent ion, emitting a high-energy photon. Figure 1: Scheme illustrating the three steps of the HHG process. Source: [1] The electric field is modeled as: \\[ E(t) = E_1 \\cos(\\omega_1 t + \\varphi_0) \\] The ponderomotive energy is: \\[ U_p = \\frac{e^2 E_1^2}{4 m_e \\omega_1^2} \\] The maximum photon energy at recombination (cutoff energy) is: \\[ E_{\\mathrm{max}} = I_p + 3.17 U_p \\] Each half-cycle of the laser allows for two possible electron trajectories \u2014 one short and one long \u2014 which contribute differently to the phase and chirp of the emitted radiation. Figure 2: Electron trajectories and final kinetic energy. Top: trajectories by energy; bottom: ionization (red) and recombination (blue) times. Source: [1] Quantum Mechanical Description \u2013 Strong Field Approximation (SFA) While the classical model provides intuitive insight, it fails to capture quantum interference. The Strong Field Approximation (SFA) extends the model and is valid when the Keldysh parameter satisfies: \\[ \\gamma = \\sqrt{\\frac{I_p}{2 U_p}} < 1 \\] Key assumptions in SFA: Single active electron (SAE) approximation Continuum electron modeled as a Volkov (free) wave The Lewenstein integral describes the time-dependent dipole moment: \\[ x(t) = 2\\, \\mathrm{Re} \\left[ \\int_{-\\infty}^{t} \\mathrm{d}t' \\, \\left( \\frac{\\pi}{\\epsilon + i(t - t')/2} \\right)^{3/2} E(t') \\, d^* \\left( p_s(t', t) - A(t) \\right) d \\left( p_s(t', t) - A(t') \\right) \\exp \\left( -i S(p_s, t', t) \\right) \\right] \\cdot \\exp \\left[ - \\int_{-\\infty}^{t} w(t')\\, dt' \\right] \\] The saddle-point momentum and quasiclassical action are: \\[ p_s(t', t) = \\frac{1}{t - t'} \\int_{t'}^t A(t'') dt'' \\] \\[ S_s(t', t) = \\int_{t'}^{t} \\left( \\frac{[p_s + A(t'')]^2}{2} + I_p \\right) dt'' \\] For hydrogen-like atoms, the dipole matrix element is approximated as: \\[ d(p) = i \\frac{2^{7/2}(2I_p)^{5/4}}{\\pi} \\cdot \\frac{p}{(p^2 + 2 I_p)^3} \\] The tunnel ionization rate is given by: \\[ w(t) = I_p \\cdot \\frac{2^{2n^*}}{n^* \\, \\Gamma(n^* + 1) \\, \\Gamma(n^*)} \\left( \\frac{4 I_p \\sqrt{2 I_p}}{\\left| E(t) \\right|} \\right)^{2n^* - 1} \\exp\\left( -\\frac{4 I_p}{3 \\omega} \\right) \\] where \\( n^* = \\sqrt{I_{ph} / I_p} \\) . For hydrogen, \\( n^* = 1 \\) . The laser field is defined as: \\[ E(r, z, t) = \\frac{E_0}{\\sqrt{1+\\frac{z^2}{z_0^2}}} \\exp\\left(-\\frac{r^2}{w^2} - \\frac{t^2}{\\tau^2} \\right) \\cos{(\\omega t + \\phi)} \\] The Rayleigh length and spatial phase are: \\[ z_0 = \\frac{\\pi w_0^2}{\\lambda}, \\quad \\phi_s = \\arctan(z/z_0) - \\frac{r^2}{w_0^2} \\cdot \\frac{z z_0}{z^2 + z_0^2} \\] The number of optical cycles helps set the simulation time window: \\[ \\text{o.c.} = \\frac{\\lambda}{c} \\] A typical simulation uses \\( 2^5 \\) optical cycles, and \\( 2^8 \\) to \\( 2^{15} \\) time points in total, determined by the exponent \\( n \\) where \\( N = 2^n \\) . Spectral Synthesis and Attosecond Pulses The dipole spectrum is computed by Fourier transform: \\[ \\tilde{x}(\\omega_q) = \\frac{1}{\\sqrt{2\\pi}} \\int_{-\\infty}^{\\infty} x(t) e^{-i \\omega_q t} dt \\] Harmonics are proportional to \\( \\omega_q^2 \\tilde{x}(\\omega_q) \\) . Attosecond pulses are constructed by selecting high harmonics and performing inverse Fourier transform: \\[ x_{\\text{atto}}(t) = \\mathcal{F}^{-1} \\left[ \\tilde{x}(\\omega_q) \\cdot W(\\omega_q) \\right] \\] where \\( W(\\omega_q) \\) is a spectral window that filters out the fundamental and low-order harmonics. Figure 3: Left: Dipole moment and electric field. Middle: Emission spectrum from Lewenstein integral. Right: Reconstructed attosecond pulse train. Source: [1] Conclusion The combination of the classical three-step model and the quantum-mechanical Lewenstein integral provides a robust theoretical foundation for simulating HHG. While the classical model offers intuitive understanding of trajectory physics and cutoff energy, the SFA framework allows for accurate spectral modeling and attosecond pulse synthesis. Together, these models form the backbone of modern HHG simulation software. Software Architecture and Simulation Pipeline The simulation software is built on a modular, three-layered architecture, where each component fulfills a distinct role: Java (Presentation Layer) : Implements the graphical user interface (GUI) using Swing. Users input physical parameters and trigger simulations. Communication to Python is established via the JPype bridge. Python (Orchestration Layer) : Manages control flow, processes user input, handles simulation logic, and invokes C++ routines. It also visualizes results using matplotlib. C++ (Computational Backend) : Contains the numerical engine that evaluates the Lewenstein integral, generates the electric field \\( E(t) \\) , vector potential \\( A(t) \\) , and computes the dipole response \\( D(t) \\) and its spectrum. Figure 4: Layered architecture of the HHG simulation software. Simulation Workflow The user launches a simulation from the GUI by entering parameters (e.g., laser wavelength, intensity, pulse duration, resolution exponent). The parameters are passed to Python via JPype. Python validates input, clears old outputs, and loads the appropriate shared library (e.g., libhhg.so ). C++ performs the core computations: spatial-temporal field construction, Lewenstein integral evaluation, and Fourier transform. Output data (e.g., \\( E(t) \\) , \\( A(t) \\) , \\( D(t) \\) , \\( |D(\\omega)| \\) ) are saved to text files in the results/ directory. Python generates plots and optionally runs convergence tests. Results are displayed or saved for further analysis. Convergence Testing The system supports resolution testing by varying the number of time steps: \\[ \\texttt{TSIZE} = 2^n \\] Dipole signals from coarser grids are compared to finer ones using the normalized \\( L_1 \\) error: \\[ \\text{area_ratio} = \\frac{\\int |D_{\\text{fine}} - D_{\\text{coarse}}| dt}{\\int |D_{\\text{fine}}| dt} \\] Figure 5: Error ratios across resolutions to verify temporal convergence. State Management and Error Handling The system operates as a finite state machine with four states: Idle : Waiting for input Running : Simulation in progress Stopped : User-interrupted Completed : Successful finish Transitions are triggered by user actions or internal events. Failures are handled via a fail-fast strategy\u2014subsequent steps are aborted if any prior stage fails, preventing cascading errors. This modular architecture and clear inter-language boundaries ensure robustness, maintainability, and extensibility for both educational and research purposes.","title":"Home"},{"location":"#welcome-to-our-hhg-project-documentation","text":"This documentation contains components written in multiple languages: C++ Module Documentation Java GUI Documentation Python Backend Documentation","title":"Welcome to Our HHG Project Documentation"},{"location":"#about-the-project","text":"This software simulates high-harmonic generation using numerical methods. It consists of: - a C++ core simulation engine, - a Java-based GUI frontend, - and a Python integration/management layer.","title":"About the Project"},{"location":"#introduction","text":"High-Harmonic Generation (HHG) is a nonlinear optical process that occurs when intense, ultrashort laser pulses interact with atoms or molecules, resulting in the emission of coherent radiation at integer multiples of the driving laser frequency. The simulation of HHG phenomena requires highly accurate numerical models capable of resolving both temporal and spatial variations of the electromagnetic field, as well as the nonlinear atomic response. Due to the inherent complexity of the problem, particularly when modeling at the single-atom level with time-dependent quantum dynamics, a computationally efficient and physically robust simulation framework is required. The purpose of this project is to develop a modular and user-friendly software platform capable of simulating the nonlinear dipole response of a single atom under a focused laser beam using the Lewenstein model. The system is intended to serve both educational and research purposes, providing intuitive parameter control through a graphical user interface (GUI), while relying on a high-performance C++ backend to carry out the numerically intensive computations. Additionally, the platform should support convergence analysis of the time grid resolution and offer visual feedback in the form of dipole and spectral plots, enabling the user to assess the accuracy and physical validity of the simulation.","title":"Introduction"},{"location":"#theoretical-background-high-order-harmonic-generation-from-a-single-atom","text":"High-order harmonic generation (HHG) is a nonlinear light\u2013matter interaction process where an atom or molecule, subjected to an intense infrared (IR) laser field, emits radiation at multiples of the fundamental frequency. This section describes the essential physical mechanisms and theoretical models used in the simulation of HHG in noble gases. In theoretical treatments of HHG, several approximations are typically made: The driving laser frequency is far from any atomic resonance. Relativistic and magnetic effects are neglected. The dipole approximation applies (wavelength \u226b atomic size).","title":"Theoretical Background: High-Order Harmonic Generation from a Single Atom"},{"location":"#classical-model-of-hhg","text":"The classical or three-step model consists of: Ionization : The electron tunnels through the Coulomb potential barrier. Acceleration : The freed electron oscillates in the laser field. Recombination : The electron returns and recombines with the parent ion, emitting a high-energy photon. Figure 1: Scheme illustrating the three steps of the HHG process. Source: [1] The electric field is modeled as: \\[ E(t) = E_1 \\cos(\\omega_1 t + \\varphi_0) \\] The ponderomotive energy is: \\[ U_p = \\frac{e^2 E_1^2}{4 m_e \\omega_1^2} \\] The maximum photon energy at recombination (cutoff energy) is: \\[ E_{\\mathrm{max}} = I_p + 3.17 U_p \\] Each half-cycle of the laser allows for two possible electron trajectories \u2014 one short and one long \u2014 which contribute differently to the phase and chirp of the emitted radiation. Figure 2: Electron trajectories and final kinetic energy. Top: trajectories by energy; bottom: ionization (red) and recombination (blue) times. Source: [1]","title":"Classical Model of HHG"},{"location":"#quantum-mechanical-description-strong-field-approximation-sfa","text":"While the classical model provides intuitive insight, it fails to capture quantum interference. The Strong Field Approximation (SFA) extends the model and is valid when the Keldysh parameter satisfies: \\[ \\gamma = \\sqrt{\\frac{I_p}{2 U_p}} < 1 \\] Key assumptions in SFA: Single active electron (SAE) approximation Continuum electron modeled as a Volkov (free) wave The Lewenstein integral describes the time-dependent dipole moment: \\[ x(t) = 2\\, \\mathrm{Re} \\left[ \\int_{-\\infty}^{t} \\mathrm{d}t' \\, \\left( \\frac{\\pi}{\\epsilon + i(t - t')/2} \\right)^{3/2} E(t') \\, d^* \\left( p_s(t', t) - A(t) \\right) d \\left( p_s(t', t) - A(t') \\right) \\exp \\left( -i S(p_s, t', t) \\right) \\right] \\cdot \\exp \\left[ - \\int_{-\\infty}^{t} w(t')\\, dt' \\right] \\] The saddle-point momentum and quasiclassical action are: \\[ p_s(t', t) = \\frac{1}{t - t'} \\int_{t'}^t A(t'') dt'' \\] \\[ S_s(t', t) = \\int_{t'}^{t} \\left( \\frac{[p_s + A(t'')]^2}{2} + I_p \\right) dt'' \\] For hydrogen-like atoms, the dipole matrix element is approximated as: \\[ d(p) = i \\frac{2^{7/2}(2I_p)^{5/4}}{\\pi} \\cdot \\frac{p}{(p^2 + 2 I_p)^3} \\] The tunnel ionization rate is given by: \\[ w(t) = I_p \\cdot \\frac{2^{2n^*}}{n^* \\, \\Gamma(n^* + 1) \\, \\Gamma(n^*)} \\left( \\frac{4 I_p \\sqrt{2 I_p}}{\\left| E(t) \\right|} \\right)^{2n^* - 1} \\exp\\left( -\\frac{4 I_p}{3 \\omega} \\right) \\] where \\( n^* = \\sqrt{I_{ph} / I_p} \\) . For hydrogen, \\( n^* = 1 \\) . The laser field is defined as: \\[ E(r, z, t) = \\frac{E_0}{\\sqrt{1+\\frac{z^2}{z_0^2}}} \\exp\\left(-\\frac{r^2}{w^2} - \\frac{t^2}{\\tau^2} \\right) \\cos{(\\omega t + \\phi)} \\] The Rayleigh length and spatial phase are: \\[ z_0 = \\frac{\\pi w_0^2}{\\lambda}, \\quad \\phi_s = \\arctan(z/z_0) - \\frac{r^2}{w_0^2} \\cdot \\frac{z z_0}{z^2 + z_0^2} \\] The number of optical cycles helps set the simulation time window: \\[ \\text{o.c.} = \\frac{\\lambda}{c} \\] A typical simulation uses \\( 2^5 \\) optical cycles, and \\( 2^8 \\) to \\( 2^{15} \\) time points in total, determined by the exponent \\( n \\) where \\( N = 2^n \\) .","title":"Quantum Mechanical Description \u2013 Strong Field Approximation (SFA)"},{"location":"#spectral-synthesis-and-attosecond-pulses","text":"The dipole spectrum is computed by Fourier transform: \\[ \\tilde{x}(\\omega_q) = \\frac{1}{\\sqrt{2\\pi}} \\int_{-\\infty}^{\\infty} x(t) e^{-i \\omega_q t} dt \\] Harmonics are proportional to \\( \\omega_q^2 \\tilde{x}(\\omega_q) \\) . Attosecond pulses are constructed by selecting high harmonics and performing inverse Fourier transform: \\[ x_{\\text{atto}}(t) = \\mathcal{F}^{-1} \\left[ \\tilde{x}(\\omega_q) \\cdot W(\\omega_q) \\right] \\] where \\( W(\\omega_q) \\) is a spectral window that filters out the fundamental and low-order harmonics. Figure 3: Left: Dipole moment and electric field. Middle: Emission spectrum from Lewenstein integral. Right: Reconstructed attosecond pulse train. Source: [1]","title":"Spectral Synthesis and Attosecond Pulses"},{"location":"#conclusion","text":"The combination of the classical three-step model and the quantum-mechanical Lewenstein integral provides a robust theoretical foundation for simulating HHG. While the classical model offers intuitive understanding of trajectory physics and cutoff energy, the SFA framework allows for accurate spectral modeling and attosecond pulse synthesis. Together, these models form the backbone of modern HHG simulation software.","title":"Conclusion"},{"location":"#software-architecture-and-simulation-pipeline","text":"The simulation software is built on a modular, three-layered architecture, where each component fulfills a distinct role: Java (Presentation Layer) : Implements the graphical user interface (GUI) using Swing. Users input physical parameters and trigger simulations. Communication to Python is established via the JPype bridge. Python (Orchestration Layer) : Manages control flow, processes user input, handles simulation logic, and invokes C++ routines. It also visualizes results using matplotlib. C++ (Computational Backend) : Contains the numerical engine that evaluates the Lewenstein integral, generates the electric field \\( E(t) \\) , vector potential \\( A(t) \\) , and computes the dipole response \\( D(t) \\) and its spectrum. Figure 4: Layered architecture of the HHG simulation software.","title":"Software Architecture and Simulation Pipeline"},{"location":"#simulation-workflow","text":"The user launches a simulation from the GUI by entering parameters (e.g., laser wavelength, intensity, pulse duration, resolution exponent). The parameters are passed to Python via JPype. Python validates input, clears old outputs, and loads the appropriate shared library (e.g., libhhg.so ). C++ performs the core computations: spatial-temporal field construction, Lewenstein integral evaluation, and Fourier transform. Output data (e.g., \\( E(t) \\) , \\( A(t) \\) , \\( D(t) \\) , \\( |D(\\omega)| \\) ) are saved to text files in the results/ directory. Python generates plots and optionally runs convergence tests. Results are displayed or saved for further analysis.","title":"Simulation Workflow"},{"location":"#convergence-testing","text":"The system supports resolution testing by varying the number of time steps: \\[ \\texttt{TSIZE} = 2^n \\] Dipole signals from coarser grids are compared to finer ones using the normalized \\( L_1 \\) error: \\[ \\text{area_ratio} = \\frac{\\int |D_{\\text{fine}} - D_{\\text{coarse}}| dt}{\\int |D_{\\text{fine}}| dt} \\] Figure 5: Error ratios across resolutions to verify temporal convergence.","title":"Convergence Testing"},{"location":"#state-management-and-error-handling","text":"The system operates as a finite state machine with four states: Idle : Waiting for input Running : Simulation in progress Stopped : User-interrupted Completed : Successful finish Transitions are triggered by user actions or internal events. Failures are handled via a fail-fast strategy\u2014subsequent steps are aborted if any prior stage fails, preventing cascading errors. This modular architecture and clear inter-language boundaries ensure robustness, maintainability, and extensibility for both educational and research purposes.","title":"State Management and Error Handling"},{"location":"java/legal/jquery/","text":"jQuery v3.7.1 jQuery License jQuery v 3.7.1 Copyright OpenJS Foundation and other contributors, https://openjsf.org/ Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Jquery"},{"location":"java/legal/jquery/#jquery-v371","text":"","title":"jQuery v3.7.1"},{"location":"java/legal/jquery/#jquery-license","text":"jQuery v 3.7.1 Copyright OpenJS Foundation and other contributors, https://openjsf.org/ Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"jQuery License"},{"location":"java/legal/jqueryUI/","text":"jQuery UI v1.13.2 jQuery UI License Copyright jQuery Foundation and other contributors, https://jquery.org/ This software consists of voluntary contributions made by many individuals. For exact contribution history, see the revision history available at https://github.com/jquery/jquery-ui The following license applies to all parts of this software except as documented below: ==== Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ==== Copyright and related rights for sample code are waived via CC0. Sample code is defined as all source code contained within the demos directory. CC0: http://creativecommons.org/publicdomain/zero/1.0/ ==== All files located in the node_modules and external directories are externally maintained libraries used by this software which have their own licenses; we recommend you read them, as their terms may differ from the terms above.","title":"jqueryUI"},{"location":"java/legal/jqueryUI/#jquery-ui-v1132","text":"","title":"jQuery UI v1.13.2"},{"location":"java/legal/jqueryUI/#jquery-ui-license","text":"Copyright jQuery Foundation and other contributors, https://jquery.org/ This software consists of voluntary contributions made by many individuals. For exact contribution history, see the revision history available at https://github.com/jquery/jquery-ui The following license applies to all parts of this software except as documented below: ==== Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ==== Copyright and related rights for sample code are waived via CC0. Sample code is defined as all source code contained within the demos directory. CC0: http://creativecommons.org/publicdomain/zero/1.0/ ==== All files located in the node_modules and external directories are externally maintained libraries used by this software which have their own licenses; we recommend you read them, as their terms may differ from the terms above.","title":"jQuery UI License"}]}